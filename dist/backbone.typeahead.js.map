{"version":3,"file":"backbone.typeahead.js","sources":["backbone.typeahead.coffee"],"names":[],"mappings":"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","sourcesContent":["# Backbone.Typeahead 1.0.0\n# (c) 2013 Mojotech\n# Backbone.Typeahead may be freely distributed under the MIT license.\n\nclass Backbone.TypeaheadCollection extends Backbone.Collection\n  tokenizeQuery: (s) ->\n    @_tokenize(s)\n\n  tokenizeAttribute: (s) ->\n    @_tokenize(s)\n\n  _tokenize: (s = '') ->\n    s = s.trim()\n    return null if s.length is 0\n\n    s.toLowerCase().split(/[\\s\\-_]+/)\n\n  ###\n    Recursive method for walking an object as defined by an\n    array. Returns the value of the last key in the array\n    sequence.\n    @private\n    @method _deepObjectMap\n    @param {Object} Object to walk\n    @param {Array} Keys to walk the object with\n    @return {Value} Last value from the object by array walk\n\n    @example\n      _deepObjectMap\n        key:\n          key2:\n            key3: \"val\"\n        , ['key', 'key2', 'key3']\n      # Returns \"val\"\n  ###\n  _deepObjectMap: (obj, attrs) ->\n    return obj unless attrs.length > 0 and _.isObject(obj)\n    return obj[attrs[0]] if attrs.length is 1\n    @_deepObjectMap(obj[attrs[0]], attrs.slice(1, attrs.length))\n\n\n  ###\n    Split each typeaheadAttribute into an array of nested methods\n    and return an array map the returned values from deepObjectMap.\n    @private\n    @method _getAttributeValues\n    @param {Backbone.Model} Model to fetch and map values from\n    @return {Array} Values from model retrieved by _deepObjectMap\n\n  ###\n  _getAttributeValues: (model) ->\n    _.map(@typeaheadAttributes, (att) =>\n      attArray = att.split('.')\n      @_deepObjectMap(model.get(attArray[0]), attArray[1..-1]))\n\n  # Check if typeaheadAttributes were set. If they were then retrieve\n  # the values via _getAttributeValues. Otherwise, get all of the values\n  # from the movdel.\n  _extractValues: (model) ->\n    if @typeaheadAttributes?\n      @_getAttributeValues(model)\n    else _.values(model.attributes)\n\n  _tokenizeModel: (model) ->\n    _.uniq(@tokenizeAttribute(\n      _.flatten(\n        @_extractValues(model)\n        ).join(' ')\n      )\n    )\n\n  _addToIndex: (models) ->\n    models = [models] unless _.isArray(models)\n\n    for model in models\n      tokens = @_tokenizeModel(model)\n      id = if model.id? then model.id else model.cid\n\n      @_tokens[id] = tokens\n\n      for t in tokens\n        character = t.charAt(0)\n        adjacency = @_adjacency[character] ||= [id]\n        adjacency.push(id) unless ~_.indexOf(adjacency, id)\n\n  _removeFromIndex: (models) ->\n    models = [models] unless _.isArray(models)\n\n    ids = _.map(models, (m) -> if m.id? then m.id else m.cid)\n\n    delete @_tokens[id] for id in ids\n\n    for k,v of @_adjacency\n      @_adjacency[k] = _.without(v, ids...)\n\n  _rebuildIndex: ->\n    @_adjacency = {}\n    @_tokens = {}\n    @_addToIndex @models\n\n  typeaheadIndexer: (facets) ->\n    return null unless facets? and _.keys(facets).length > 0\n    _.map(@where(facets), (m) -> if m.id? then m.id else m.cid)\n\n  typeahead: (query, facets) ->\n    throw new Error('Index is not built') unless @_adjacency?\n\n    queryTokens = @tokenizeQuery(query)\n    lists = []\n    shortestList = null\n    firstChars = _(queryTokens).chain().map((t) -> t.charAt(0)).uniq().value()\n    checkIfShortestList = (list) =>\n      shortestList = list if list.length <= (shortestList?.length or @length)\n\n    _.every firstChars, (firstChar) =>\n      list = @_adjacency[firstChar]\n\n      return false unless list?\n\n      lists.push list\n      checkIfShortestList list\n\n      true\n\n    return [] if lists.length < firstChars.length\n\n    facetList = @typeaheadIndexer(facets)\n\n    if facetList?\n      lists.push facetList\n      checkIfShortestList facetList\n\n    return @models unless shortestList?\n    return [] if shortestList.length is 0\n\n    suggestions = []\n\n    for id in shortestList\n      isCandidate = _.every lists, (list) ->\n        ~_.indexOf(list, id)\n\n      isMatch = isCandidate and _.every queryTokens, (qt) =>\n        _.some @_tokens[id], (t) ->\n          t.indexOf(qt) is 0\n\n      if isMatch\n        item = @get(id)\n\n        if @typeaheadPreserveOrder\n          suggestions[@indexOf(item)] = item\n        else\n          suggestions.push item\n\n    if @typeaheadPreserveOrder then _.compact(suggestions) else suggestions\n\n  _reset: ->\n    @_tokens = {}\n    @_adjacency = {}\n    super\n\n  set: ->\n    models = super\n    models = [models] unless _.isArray(models)\n    @_rebuildIndex models\n    models\n\n  remove: ->\n    models = super\n    models = [models] unless _.isArray(models)\n    @_removeFromIndex models\n    models\n\n  _onModelEvent: (event, model, collection, options) ->\n    if model?\n      add = false\n\n      if event is \"change:#{model.idAttribute}\"\n        add = true\n        @_removeFromIndex id: model.previous(model.idAttribute)\n      else if event.indexOf('change:') is 0\n        changeEventList = _.map(@typeaheadAttributes, (att) -> 'change:' + att)\n        if not @typeaheadAttributes? or _.contains(changeEventList, event)\n          add = true\n          @_removeFromIndex model\n\n      @_addToIndex model if add\n\n    super\n"]}